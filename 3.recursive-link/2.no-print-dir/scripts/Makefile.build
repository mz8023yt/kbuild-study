include $(srctree)/scripts/Makefile.include

### 定义变量
PHONY           := build
build           :

### 清空变量值，避免环境变量干扰
obj-y           :=
subdir-y        :=

### 这里是包含遍历时各个子目录的 Makefile
### 注意看顶层 Makefile 调用此脚本和本脚本自己递归调用自己的用法
###     顶层: make -C ./ -f $(srctree)/scripts/Makefile.build
###     递归: make -C $@ -f $(srctree)/scripts/Makefile.build
### 都是先通过 -C 进入到对应工作目录后，再 -f 调用脚本
### 因此这里包含的是子目录中的 Makefile
include Makefile

### 将 obj-y 中所有的子目录目标最后的反斜杠给删除
### filter 过滤函数, 将 $(obj-y) 中所有以 / 结尾的字符串过滤出来, 说白了就是找出目录
### patsubst 模式字符串替换函数, 将所有以 / 结尾的字符串最后的 / 给去掉
__subdir-y      := $(patsubst %/,%,$(filter %/, $(obj-y)))
subdir-y        += $(__subdir-y)
PHONY           += $(subdir-y)

### 遍历 obj-y 中所有的子目录, 为每一个子目录创建 built-in.o 目标
### foreach 循环函数, 依次取出上面找到的目录目标 $(subdir-y) 中的每一个元素, 创建 xxx/built-in.o 目标
subdir_objs := $(foreach f,$(subdir-y),$(f)/built-in.o)

### 筛选出非目录目标
### filter-out 反过滤函数, 将 $(obj-y) 中不是 / 结尾的目标找出来
cur_objs    := $(filter-out %/, $(obj-y))
dep_files   := $(foreach f,$(cur_objs),.$(f).d)

ifeq ($(mdebug), 1)
$(info 1. $(subdir-y))
$(info 2. $(subdir_objs))
$(info 3. $(cur_objs))
$(info 4. $(dep_files))
endif

### build 目标依赖于子目录目标(伪目标)和当前目录的 built-in.o 目标
### 子目录伪目标目的是生成 xxx/built-in.o, 这里形成了递归
build : $(subdir-y) built-in.o
$(subdir-y):
	$(Q)$(MAKE) -C $@ -f $(srctree)/scripts/Makefile.build

### 非目录目标链接为 built-in.o
built-in.o : $(cur_objs) $(subdir_objs)
	$(LD) -r -o $@ $^

### 当前目录下的目标文件为 obj-y = xxx.o, 由 .c 生成 .o 需要用到这个规则
### 同时创建 .d 依赖文件, 具体可以参考 https://blog.csdn.net/jeffasd/article/details/83414493
%.o : %.c
	$(CC) $(CFLAGS) -Wp,-MD,.$@.d -c -o $@ $<

### 将之前创建的目标, 正式的定义为伪目标
.PHONY : $(PHONY)
